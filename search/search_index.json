{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"About me","text":"<p>Hi, I'm Camill and I like tech, data and biology. I use this site to document helpful things I wanted to know before.</p>"},{"location":"kubernetes-helpers/","title":"Kubernetes helpers with <code>fzf</code>","text":"<p>Running Kubernetes clusters often involves memorizing quite a few <code>kubectl</code> subcommands, options and pipes. To make this easier, the fuzzy finder tool <code>fzf</code> can be used to interactively switch between self-defined shortcuts. Additionally, it facilitates searching.</p> <p>Firstly, it is necessary to define a prefix that will be used for all functions.</p> <pre><code>export KUBE_HELPERS_PREFIX='kh'\n</code></pre> <p>Then we define a parent function to toggle between the prefixed function definitions. The bash expansion <code>$@</code> is used to pass the arguments to the child call.</p> <p><pre><code>$KUBE_HELPERS_PREFIX () {\n    local selected=$(compgen -A function | grep \"^${KUBE_HELPERS_PREFIX}_\" | fzf)\n    $selected $@\n}\n</code></pre> Now we can define some shortcuts, e.g. one to return all pod IPs in the cluster.</p> <pre><code>${KUBE_HELPERS_PREFIX}_pod_ips() {\n    kubectl get po -A -o json | jq -r '.items[] | [ .status.podIP, .metadata.namespace, .metadata.name ] | @tsv ' | column -t\n}\n</code></pre> <p>Or a interactive way to open a shell session or to run a self-defined command in a pod.</p> <pre><code>${KUBE_HELPERS_PREFIX}_pod_shell() {\n    local pod=$(kubectl get pods --no-headers -o custom-columns=\":metadata.name\" | fzf)\n    kubectl exec -it $pod -- \"$@\" || kubectl exec -it $pod -- /bin/bash || kubectl exec -it $pod -- /bin/sh\n}\n</code></pre> <p>Running <code>kh</code> now will prompt us for our defined functions.</p>"},{"location":"sniff-kubernetes-pods/","title":"Sniff Kubernetes pods","text":"<p>The next example shows how network debugging in Kubernetes can be simplified. Analyzing traffic in a pod can quickly become complex. TLS and mTLS, for example, can be managed by a backend or by a service mesh. The following function can be used to get a quick actual state. It uses ephemeral containers and <code>tcpdump</code> to get a network dump. The dump is then copied to the host to be analyzed with e.g. Wireshark.</p> <pre><code>${KUBE_HELPERS_PREFIX}_sniff_pod() {\n    local pod=$(kubectl get pods --no-headers -o custom-columns=\":metadata.name\" | fzf)\n    local timestamp=$(date +%s)\n    local target_local_path=${1:-~}\n    local max_time=${2:-30}\n    local dump_name=$pod-$timestamp.pcap\n\n    kubectl debug $pod -it --attach=false -c tcpdump-$timestamp --image=nicolaka/netshoot -- timeout $max_time tcpdump -i any -vv -s 65535 -w $dump_name\n\n    sleep 5\n\n    stoptime=$(((max_time - 5) + $(date +%s)))\n    while [ $(date +%s) -lt $stoptime ]; do\n        kubectl cp -c tcpdump-$timestamp $pod:$dump_name $target_local_path/$dump_name\n        sleep 1\n    done\n\n    sleep 4\n\n    # Ensure container was terminated\n    kubectl get pod $pod -o jsonpath='{.status.ephemeralContainerStatuses}'| jq  '.[] | select( .name | contains('\\\"tcpdump-$timestamp\\\"')).state'\n}\n</code></pre> <p>The function can be invoked by either running <code>kh ~ 20</code> or <code>kh_sniff_pod ~ 20</code>.</p>"},{"location":"strimzi-aiokafka-tls/","title":"Strimzi Kafka resource","text":""},{"location":"strimzi-aiokafka-tls/#create-kafkausers","title":"Create KafkaUsers","text":""},{"location":"strimzi-aiokafka-tls/#copy-secrets-with-pulumi","title":"Copy secrets with Pulumi","text":""},{"location":"strimzi-aiokafka-tls/#configure-aiokafka","title":"Configure aiokafka","text":"<p>k patch deployments.apps app1 -p '{\"spec\":{\"template\":{\"spec\": {\"shareProcessNamespace\": true}}}}'</p> <p>~/kubectl debug app1-6d96c757f-df5pc -it --attach=true -c debugge1 --profile=sysadmin --share-processes --image=python:3.11.4-slim-buster -- apt update &amp;&amp; apt install gdp procps &amp;&amp; pip install debugpy &amp;&amp; pid$(pidof) x &amp;&amp; python -m debugpy --listen 0.0.0.0:5678 --pid 1</p>"}]}